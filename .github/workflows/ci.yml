name: Continuous Integration

on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main

permissions:
    contents: read

jobs:
    test-typescript:
        name: TypeScript Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: .node-version

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9

            - name: Get pnpm store directory
              id: pnpm-cache
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                  key:
                      ${{ runner.os }}-pnpm-store-${{
                      hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install Dependencies
              run: pnpm install --frozen-lockfile

            - name: Check Format
              run: pnpm run format:check

            - name: Lint
              run: pnpm run lint

            - name: Test
              run: pnpm run ci-test

    test-action:
        name: GitHub Actions Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup test registry
              run: |
                  mkdir -p test-registry/auth
                  docker run --entrypoint htpasswd httpd:2 -Bbn testuser testpass > test-registry/auth/htpasswd

                  docker run -d \
                    -p 5000:5000 \
                    --name registry \
                    -v $(pwd)/test-registry/auth:/auth \
                    -e REGISTRY_STORAGE_DELETE_ENABLED=true \
                    -e REGISTRY_AUTH=htpasswd \
                    -e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" \
                    -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
                    registry:2

                  # Wait for registry to be ready
                  for i in {1..30}; do
                    if curl -s http://localhost:5000/v2/ > /dev/null; then
                      echo "Registry is up"
                      break
                    fi
                    echo "Waiting for registry... (attempt $i)"
                    sleep 1
                  done

                  # Attempt Docker login
                  for i in {1..5}; do
                    if docker login localhost:5000 -u testuser -p testpass; then
                      echo "Login successful"
                      break
                    fi
                    echo "Login failed, retrying in 5 seconds... (attempt $i)"
                    sleep 5
                  done

                  # Build and push v1.0.0
                  docker build -t localhost:5000/test-image:v1.0.0 -f- . <<EOF
                  FROM scratch
                  COPY README.md /
                  EOF
                  docker push localhost:5000/test-image:v1.0.0
                  docker tag localhost:5000/test-image:v1.0.0 localhost:5000/test-image:latest
                  docker push localhost:5000/test-image:latest

                  # Build and push v2.0.0
                  docker build -t localhost:5000/test-image:v2.0.0 -f- . <<EOF
                  FROM scratch
                  COPY LICENSE /
                  EOF
                  docker push localhost:5000/test-image:v2.0.0
                  docker tag localhost:5000/test-image:v2.0.0 localhost:5000/test-image:latest
                  docker push localhost:5000/test-image:latest

            - name: Run action
              uses: ./
              with:
                  domain: http://localhost:5000
                  user: testuser
                  password: testpass
                  image: test-image
                  regex: 'latest|v2\.0\.0'

            - name: Verify results
              run: |
                  tags=$(curl -s -u testuser:testpass http://localhost:5000/v2/test-image/tags/list | jq -r '.tags[]')
                  if [[ $tags == *"v2.0.0"* ]] && [[ $tags == *"latest"* ]] && [[ $tags != *"v1.0.0"* ]]; then
                    echo "Tags pruned successfully"
                  else
                    echo "Tag pruning failed"
                    echo "Remaining tags: $tags"
                    exit 1
                  fi
